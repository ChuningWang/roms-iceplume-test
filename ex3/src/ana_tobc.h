      SUBROUTINE ana_tobc (ng, tile, model)
!
!! svn $Id$
!!======================================================================
!! Copyright (c) 2002-2017 The ROMS/TOMS Group                         !
!!   Licensed under a MIT/X style license                              !
!!   See License_ROMS.txt                                              !
!=======================================================================
!                                                                      !
!  This routine sets tracer-type variables open boundary conditions    !
!  using analytical expressions.                                       !
!                                                                      !
!=======================================================================
!
      USE mod_param
      USE mod_boundary
      USE mod_grid
      USE mod_ncparam
      USE mod_ocean
      USE mod_stepping
!
! Imported variable declarations.
!
      integer, intent(in) :: ng, tile, model

#include "tile.h"
!
      CALL ana_tobc_tile (ng, tile, model,                              &
     &                    LBi, UBi, LBj, UBj,                           &
     &                    IminS, ImaxS, JminS, JmaxS,                   &
     &                    nstp(ng),                                     &
     &                    GRID(ng) % z_r,                               &
     &                    OCEAN(ng) % t)
!
! Set analytical header file name used.
!
#ifdef DISTRIBUTE
      IF (Lanafile) THEN
#else
      IF (Lanafile.and.(tile.eq.0)) THEN
#endif
        ANANAME(34)=__FILE__
      END IF

      RETURN
      END SUBROUTINE ana_tobc
!
!***********************************************************************
      SUBROUTINE ana_tobc_tile (ng, tile, model,                        &
     &                          LBi, UBi, LBj, UBj,                     &
     &                          IminS, ImaxS, JminS, JmaxS,             &
     &                          nstp,                                   &
     &                          z_r, t)
!***********************************************************************
!
      USE mod_param
      USE mod_scalars
      USE mod_boundary
      USE mod_ncparam
      USE mod_ocean
#ifdef SEDIMENT
      USE mod_sediment
#endif
!
!  Imported variable declarations.
!
      integer, intent(in) :: ng, tile, model
      integer, intent(in) :: LBi, UBi, LBj, UBj
      integer, intent(in) :: IminS, ImaxS, JminS, JmaxS
      integer, intent(in) :: nstp

#ifdef ASSUMED_SHAPE
      real(r8), intent(in) :: z_r(LBi:,LBj:,:)
      real(r8), intent(in) :: t(LBi:,LBj:,:,:,:)
#else
      real(r8), intent(in) :: z_r(LBi:UBi,LBj:UBj,N(ng))
      real(r8), intent(in) :: t(LBi:UBi,LBj:UBj,N(ng),3,NT(ng))
#endif
!
!  Local variable declarations.
!
      integer :: i, ised, itrc, j, k
      real(r8) :: titp, sitp

#include "set_bounds.h"
!
!-----------------------------------------------------------------------
!  Tracers open boundary conditions.
!-----------------------------------------------------------------------
!
#ifdef FJORD
      IF (ANY(LBC(ieast,isTvar(:),ng)%acquire).and.                     &
     &    DOMAIN(ng)%Eastern_Edge(tile)) THEN
        DO k=1,N(ng)
          DO j=JstrT,JendT
            CALL LININTP(z_r(Iend+1,j,k), titp, sitp)
            BOUNDARY(ng)%t_east(j,k,itemp) = titp
# ifdef SALINITY
            BOUNDARY(ng)%t_east(j,k,isalt) = sitp
# endif
# ifdef SEDIMENT
            DO ised=1,NST
              BOUNDARY(ng)%t_east(j,k,idsed(ised))=0.0_r8
            END DO
# endif
          END DO
        END DO
      END IF

      IF (ANY(LBC(iwest,isTvar(:),ng)%acquire).and.                     &
     &    DOMAIN(ng)%Western_Edge(tile)) THEN
        DO k=1,N(ng)
          DO j=JstrT,JendT
            CALL LININTP(z_r(0,j,k), titp, sitp)
            BOUNDARY(ng)%t_west(j,k,itemp) = titp
# ifdef SALINITY
            BOUNDARY(ng)%t_west(j,k,isalt) = sitp
# endif
# ifdef SEDIMENT
            DO ised=1,NST
              BOUNDARY(ng)%t_west(j,k,idsed(ised))=0.0_r8
            END DO
# endif
          END DO
        END DO
      END IF

      IF (ANY(LBC(isouth,isTvar(:),ng)%acquire).and.                    &
     &    DOMAIN(ng)%Southern_Edge(tile)) THEN
        DO k=1,N(ng)
          DO i=IstrT,IendT
            CALL LININTP(z_r(i,0,k), titp, sitp)
            BOUNDARY(ng)%t_south(i,k,itemp) = titp
# ifdef SALINITY
            BOUNDARY(ng)%t_south(i,k,isalt) = sitp
# endif
# ifdef SEDIMENT
            DO ised=1,NST
              BOUNDARY(ng)%t_south(i,k,idsed(ised))=0.0_r8
            END DO
# endif
          END DO
        END DO
      END IF

      IF (ANY(LBC(inorth,isTvar(:),ng)%acquire).and.                    &
     &    DOMAIN(ng)%Northern_Edge(tile)) THEN
        DO k=1,N(ng)
          DO i=IstrT,IendT
            CALL LININTP(z_r(i,Jend+1,k), titp, sitp)
            BOUNDARY(ng)%t_north(i,k,itemp) = titp
# ifdef SALINITY
            BOUNDARY(ng)%t_north(i,k,isalt) = sitp
# endif
# ifdef SEDIMENT
            DO ised=1,NST
              BOUNDARY(ng)%t_north(i,k,idsed(ised))=0.0_r8
            END DO
# endif
          END DO
        END DO
      END IF

#else

      IF (ANY(LBC(ieast,isTvar(:),ng)%acquire).and.                     &
     &    DOMAIN(ng)%Eastern_Edge(tile)) THEN
        DO itrc=1,NT(ng)
          DO k=1,N(ng)
            DO j=JstrT,JendT
              BOUNDARY(ng)%t_east(j,k,itrc)=0.0_r8
            END DO
          END DO
        END DO
      END IF

      IF (ANY(LBC(iwest,isTvar(:),ng)%acquire).and.                     &
     &    DOMAIN(ng)%Western_Edge(tile)) THEN
        DO itrc=1,NT(ng)
          DO k=1,N(ng)
            DO j=JstrT,JendT
              BOUNDARY(ng)%t_west(j,k,itrc)=0.0_r8
            END DO
          END DO
        END DO
      END IF

      IF (ANY(LBC(isouth,isTvar(:),ng)%acquire).and.                    &
     &    DOMAIN(ng)%Southern_Edge(tile)) THEN
        DO itrc=1,NT(ng)
          DO k=1,N(ng)
            DO i=IstrT,IendT
              BOUNDARY(ng)%t_south(i,k,itrc)=0.0_r8
            END DO
          END DO
        END DO
      END IF

      IF (ANY(LBC(inorth,isTvar(:),ng)%acquire).and.                    &
     &    DOMAIN(ng)%Northern_Edge(tile)) THEN
        DO itrc=1,NT(ng)
          DO k=1,N(ng)
            DO i=IstrT,IendT
              BOUNDARY(ng)%t_north(i,k,itrc)=0.0_r8
            END DO
          END DO
        END DO
      END IF

#endif

      RETURN
      END SUBROUTINE ana_tobc_tile

      SUBROUTINE LININTP(z, t, s)
!
      USE mod_kinds
!
      real(r8), intent(in) :: z
      real(r8), intent(out) :: t, s
!
! local variables
!
      integer, parameter :: nz=301

! -400.00, 34.392717113339089, 2.533568770888178
! 10.00, 30.080045088852266, 5.988397286528688

      real(r8), dimension(nz), parameter :: z00 = (/                    &
     &           -302._r8,-301._r8,                                     &
     &  -300._r8,-299._r8,-298._r8,                                     &
     &  -297._r8,-296._r8,-295._r8,                                     &
     &  -294._r8,-293._r8,-292._r8,                                     &
     &  -291._r8,-290._r8,-289._r8,                                     &
     &  -288._r8,-287._r8,-286._r8,                                     &
     &  -285._r8,-284._r8,-283._r8,                                     &
     &  -282._r8,-281._r8,-280._r8,                                     &
     &  -279._r8,-278._r8,-277._r8,                                     &
     &  -276._r8,-275._r8,-274._r8,                                     &
     &  -273._r8,-272._r8,-271._r8,                                     &
     &  -270._r8,-269._r8,-268._r8,                                     &
     &  -267._r8,-266._r8,-265._r8,                                     &
     &  -264._r8,-263._r8,-262._r8,                                     &
     &  -261._r8,-260._r8,-259._r8,                                     &
     &  -258._r8,-257._r8,-256._r8,                                     &
     &  -255._r8,-254._r8,-253._r8,                                     &
     &  -252._r8,-251._r8,-250._r8,                                     &
     &  -249._r8,-248._r8,-247._r8,                                     &
     &  -246._r8,-245._r8,-244._r8,                                     &
     &  -243._r8,-242._r8,-241._r8,                                     &
     &  -240._r8,-239._r8,-238._r8,                                     &
     &  -237._r8,-236._r8,-235._r8,                                     &
     &  -234._r8,-233._r8,-232._r8,                                     &
     &  -231._r8,-230._r8,-229._r8,                                     &
     &  -228._r8,-227._r8,-226._r8,                                     &
     &  -225._r8,-224._r8,-223._r8,                                     &
     &  -222._r8,-221._r8,-220._r8,                                     &
     &  -219._r8,-218._r8,-217._r8,                                     &
     &  -216._r8,-215._r8,-214._r8,                                     &
     &  -213._r8,-212._r8,-211._r8,                                     &
     &  -210._r8,-209._r8,-208._r8,                                     &
     &  -207._r8,-206._r8,-205._r8,                                     &
     &  -204._r8,-203._r8,-202._r8,                                     &
     &  -201._r8,-200._r8,-199._r8,                                     &
     &  -198._r8,-197._r8,-196._r8,                                     &
     &  -195._r8,-194._r8,-193._r8,                                     &
     &  -192._r8,-191._r8,-190._r8,                                     &
     &  -189._r8,-188._r8,-187._r8,                                     &
     &  -186._r8,-185._r8,-184._r8,                                     &
     &  -183._r8,-182._r8,-181._r8,                                     &
     &  -180._r8,-179._r8,-178._r8,                                     &
     &  -177._r8,-176._r8,-175._r8,                                     &
     &  -174._r8,-173._r8,-172._r8,                                     &
     &  -171._r8,-170._r8,-169._r8,                                     &
     &  -168._r8,-167._r8,-166._r8,                                     &
     &  -165._r8,-164._r8,-163._r8,                                     &
     &  -162._r8,-161._r8,-160._r8,                                     &
     &  -159._r8,-158._r8,-157._r8,                                     &
     &  -156._r8,-155._r8,-154._r8,                                     &
     &  -153._r8,-152._r8,-151._r8,                                     &
     &  -150._r8,-149._r8,-148._r8,                                     &
     &  -147._r8,-146._r8,-145._r8,                                     &
     &  -144._r8,-143._r8,-142._r8,                                     &
     &  -141._r8,-140._r8,-139._r8,                                     &
     &  -138._r8,-137._r8,-136._r8,                                     &
     &  -135._r8,-134._r8,-133._r8,                                     &
     &  -132._r8,-131._r8,-130._r8,                                     &
     &  -129._r8,-128._r8,-127._r8,                                     &
     &  -126._r8,-125._r8,-124._r8,                                     &
     &  -123._r8,-122._r8,-121._r8,                                     &
     &  -120._r8,-119._r8,-118._r8,                                     &
     &  -117._r8,-116._r8,-115._r8,                                     &
     &  -114._r8,-113._r8,-112._r8,                                     &
     &  -111._r8,-110._r8,-109._r8,                                     &
     &  -108._r8,-107._r8,-106._r8,                                     &
     &  -105._r8,-104._r8,-103._r8,                                     &
     &  -102._r8,-101._r8,-100._r8,                                     &
     &   -99._r8, -98._r8, -97._r8,                                     &
     &   -96._r8, -95._r8, -94._r8,                                     &
     &   -93._r8, -92._r8, -91._r8,                                     &
     &   -90._r8, -89._r8, -88._r8,                                     &
     &   -87._r8, -86._r8, -85._r8,                                     &
     &   -84._r8, -83._r8, -82._r8,                                     &
     &   -81._r8, -80._r8, -79._r8,                                     &
     &   -78._r8, -77._r8, -76._r8,                                     &
     &   -75._r8, -74._r8, -73._r8,                                     &
     &   -72._r8, -71._r8, -70._r8,                                     &
     &   -69._r8, -68._r8, -67._r8,                                     &
     &   -66._r8, -65._r8, -64._r8,                                     &
     &   -63._r8, -62._r8, -61._r8,                                     &
     &   -60._r8, -59._r8, -58._r8,                                     &
     &   -57._r8, -56._r8, -55._r8,                                     &
     &   -54._r8, -53._r8, -52._r8,                                     &
     &   -51._r8, -50._r8, -49._r8,                                     &
     &   -48._r8, -47._r8, -46._r8,                                     &
     &   -45._r8, -44._r8, -43._r8,                                     &
     &   -42._r8, -41._r8, -40._r8,                                     &
     &   -39._r8, -38._r8, -37._r8,                                     &
     &   -36._r8, -35._r8, -34._r8,                                     &
     &   -33._r8, -32._r8, -31._r8,                                     &
     &   -30._r8, -29._r8, -28._r8,                                     &
     &   -27._r8, -26._r8, -25._r8,                                     &
     &   -24._r8, -23._r8, -22._r8,                                     &
     &   -21._r8, -20._r8, -19._r8,                                     &
     &   -18._r8, -17._r8, -16._r8,                                     &
     &   -15._r8, -14._r8, -13._r8,                                     &
     &   -12._r8, -11._r8, -10._r8,                                     &
     &    -9._r8,  -8._r8,  -7._r8,                                     &
     &    -6._r8,  -5._r8,  -4._r8,                                     &
     &    -3._r8,  -2._r8                                               &
     & /)
      real(r8), dimension(nz), parameter :: t00 = (/                    &
     &                      2.34047356576195_r8, 2.338503206525972_r8,  &
     & 2.33653375966150_r8, 2.33456556458139_r8, 2.332598631857211_r8,  &
     & 2.33063257907827_r8, 2.32866659650565_r8, 2.326699442980951_r8,  &
     & 2.32472947033001_r8, 2.32275467269588_r8, 2.320772755955863_r8,  &
     & 2.31878122166189_r8, 2.31677745976553_r8, 2.314758844666921_r8,  &
     & 2.31272282974887_r8, 2.31066703639430_r8, 2.308589334413571_r8,  &
     & 2.30648791172331_r8, 2.30436133194077_r8, 2.302208579240726_r8,  &
     & 2.30002909034720_r8, 2.29782277390664_r8, 2.295590017735881_r8,  &
     & 2.29333168459198_r8, 2.29104909720544_r8, 2.288744013385705_r8,  &
     & 2.28641859207077_r8, 2.28407535126511_r8, 2.281717118894324_r8,  &
     & 2.27934697769883_r8, 2.27696820538181_r8, 2.274584211308210_r8,  &
     & 2.27219847111201_r8, 2.26830356319216_r8, 2.263100105635865_r8,  &
     & 2.25753645076588_r8, 2.25107597824823_r8, 2.243924968274257_r8,  &
     & 2.23655122779497_r8, 2.22921760092487_r8, 2.222108879249454_r8,  &
     & 2.21319153770731_r8, 2.20203457884201_r8, 2.191105650083847_r8,  &
     & 2.18196124695018_r8, 2.17342777803987_r8, 2.164805162832653_r8,  &
     & 2.15609955264037_r8, 2.14703303882595_r8, 2.138692849850082_r8,  &
     & 2.13047818474580_r8, 2.12101867397805_r8, 2.110407028792348_r8,  &
     & 2.09934207192103_r8, 2.08682426596144_r8, 2.073746852116809_r8,  &
     & 2.06231609789077_r8, 2.05287244223146_r8, 2.045007192968911_r8,  &
     & 2.03765016597780_r8, 2.03032502072332_r8, 2.022578642700211_r8,  &
     & 2.01376561460490_r8, 2.00402684705609_r8, 1.994752006254619_r8,  &
     & 1.98974802496193_r8, 1.98647343989025_r8, 1.980609792062779_r8,  &
     & 1.97398531992583_r8, 1.96669292220239_r8, 1.959159905355215_r8,  &
     & 1.95218085125538_r8, 1.94553856966641_r8, 1.939838225389268_r8,  &
     & 1.93461155858222_r8, 1.92592279489895_r8, 1.915880055791533_r8,  &
     & 1.90774616954269_r8, 1.89906071701565_r8, 1.888252719291199_r8,  &
     & 1.87648615814940_r8, 1.86601062241757_r8, 1.855324401315993_r8,  &
     & 1.84423522294626_r8, 1.83408224087886_r8, 1.825024109382046_r8,  &
     & 1.81669783866155_r8, 1.80869763235276_r8, 1.800605304728972_r8,  &
     & 1.78967195310410_r8, 1.77616863148355_r8, 1.763177271609640_r8,  &
     & 1.75166808728554_r8, 1.74073057775844_r8, 1.729357614583048_r8,  &
     & 1.71746055610190_r8, 1.70604272447222_r8, 1.695141182622647_r8,  &
     & 1.68381417092635_r8, 1.67327844462598_r8, 1.664279742748102_r8,  &
     & 1.65598128764825_r8, 1.64640683637745_r8, 1.635134031364665_r8,  &
     & 1.62376137453675_r8, 1.61348528399923_r8, 1.603701967380735_r8,  &
     & 1.59370213987539_r8, 1.58491502997903_r8, 1.576559417385747_r8,  &
     & 1.56745399740064_r8, 1.55765292049283_r8, 1.547251786662378_r8,  &
     & 1.53687197759645_r8, 1.52696822432202_r8, 1.517774420271915_r8,  &
     & 1.50916211380795_r8, 1.50081520749396_r8, 1.493283171653376_r8,  &
     & 1.48680076991091_r8, 1.48009845185492_r8, 1.472983829424072_r8,  &
     & 1.46583972998569_r8, 1.45894267981035_r8, 1.453530911756636_r8,  &
     & 1.44836286138053_r8, 1.44177007070757_r8, 1.434352551030762_r8,  &
     & 1.42709944458758_r8, 1.42099058824454_r8, 1.415295799869713_r8,  &
     & 1.41024743149172_r8, 1.40555810034432_r8, 1.398679252080807_r8,  &
     & 1.39026466765412_r8, 1.38199382932967_r8, 1.373053395988881_r8,  &
     & 1.36403953163317_r8, 1.35618432158647_r8, 1.347369004093805_r8,  &
     & 1.33576923999122_r8, 1.32095467659892_r8, 1.305169739033463_r8,  &
     & 1.29046967325796_r8, 1.27507698118620_r8, 1.262599681974158_r8,  &
     & 1.25366006543494_r8, 1.24602230844548_r8, 1.237603770828117_r8,  &
     & 1.22583113922070_r8, 1.21401656255628_r8, 1.201414268273534_r8,  &
     & 1.18990890701066_r8, 1.18133870345874_r8, 1.171402095959706_r8,  &
     & 1.15975625471789_r8, 1.14845233310072_r8, 1.137113922315501_r8,  &
     & 1.12482157313806_r8, 1.11196099317600_r8, 1.098789991201684_r8,  &
     & 1.08574374903643_r8, 1.07311979290401_r8, 1.060541179976575_r8,  &
     & 1.04764864367827_r8, 1.03420493664025_r8, 1.020231250662414_r8,  &
     & 1.00651345649038_r8, 0.99345446953660_r8, 0.981682587149343_r8,  &
     & 0.97119106482163_r8, 0.96174729645616_r8, 0.953400894883581_r8,  &
     & 0.94539556623340_r8, 0.93763855926121_r8, 0.930085224761283_r8,  &
     & 0.92287264828490_r8, 0.91575439099248_r8, 0.907778398966939_r8,  &
     & 0.89922980529073_r8, 0.88963749003452_r8, 0.878840911440614_r8,  &
     & 0.86762808476237_r8, 0.85592263378196_r8, 0.843673878341329_r8,  &
     & 0.83112686268512_r8, 0.81764379475637_r8, 0.802552792559346_r8,  &
     & 0.78723158283325_r8, 0.77235118101483_r8, 0.756458594137344_r8,  &
     & 0.73996537217824_r8, 0.72340194634743_r8, 0.706766510218007_r8,  &
     & 0.69084374759787_r8, 0.67522423561081_r8, 0.659110494343392_r8,  &
     & 0.64269448034620_r8, 0.62533640218842_r8, 0.605363008950272_r8,  &
     & 0.58442528818545_r8, 0.56387719494493_r8, 0.541849048827636_r8,  &
     & 0.51883911298531_r8, 0.49666448015997_r8, 0.475396317688420_r8,  &
     & 0.45555868654782_r8, 0.43626706684864_r8, 0.415262669109665_r8,  &
     & 0.39351924708045_r8, 0.37367297201401_r8, 0.355755164770686_r8,  &
     & 0.33783702608694_r8, 0.32023924865068_r8, 0.303013019168453_r8,  &
     & 0.28578223178703_r8, 0.26961475850323_r8, 0.254695812935262_r8,  &
     & 0.24047544307124_r8, 0.22670016721523_r8, 0.213050835937382_r8,  &
     & 0.19869096851048_r8, 0.18438491868933_r8, 0.171300455722508_r8,  &
     & 0.15872111904235_r8, 0.14607038373896_r8, 0.134347340671901_r8,  &
     & 0.12419352259024_r8, 0.11394893278556_r8, 0.102775609811928_r8,  &
     & 0.09160405699957_r8, 0.08000861396090_r8, 0.068672041963048_r8,  &
     & 0.05899780711494_r8, 0.05128683194126_r8, 0.046469831219527_r8,  &
     & 0.04387939766472_r8, 0.04118324521184_r8, 0.038083465046784_r8,  &
     & 0.03647166997247_r8, 0.03999938924904_r8, 0.049433643457703_r8,  &
     & 0.06165074016278_r8, 0.07580775882117_r8, 0.092072631491773_r8,  &
     & 0.11082708550802_r8, 0.13109372267142_r8, 0.150637837062027_r8,  &
     & 0.17348878081725_r8, 0.20079991393037_r8, 0.227892936297005_r8,  &
     & 0.25531417829541_r8, 0.28429234224871_r8, 0.312208319576400_r8,  &
     & 0.34091876724634_r8, 0.37412265780268_r8, 0.409535929010351_r8,  &
     & 0.44376961773225_r8, 0.47470227981206_r8, 0.503338429555012_r8,  &
     & 0.53154513098523_r8, 0.55834234457487_r8, 0.583059578889062_r8,  &
     & 0.60578821226453_r8, 0.62715187617895_r8, 0.648599626580088_r8,  &
     & 0.66951914805351_r8, 0.68892061667995_r8, 0.708913408831041_r8,  &
     & 0.73194086333464_r8, 0.75606701348514_r8, 0.779158806317783_r8,  &
     & 0.80204363216258_r8, 0.82343648850452_r8, 0.843176256904931_r8,  &
     & 0.86281331411935_r8, 0.88304157544756_r8, 0.903571521740441_r8,  &
     & 0.92418505387136_r8, 0.94435111371365_r8, 0.962815963483071_r8,  &
     & 0.98039010598877_r8, 0.99887188214654_r8, 1.021385718607944_r8,  &
     & 1.04894974942594_r8, 1.08052254371734_r8, 1.114434032927831_r8,  &
     & 1.15144083155119_r8, 1.19265704028400_r8, 1.231531859669258_r8,  &
     & 1.26810313130576_r8, 1.31524503939748_r8, 1.385223972591368_r8,  &
     & 1.48090485197548_r8, 1.59763969481731_r8, 1.740587979978224_r8,  &
     & 1.96944512799909_r8, 2.24527563398092_r8, 2.516396357710134_r8,  &
     & 2.78372215865594_r8, 3.03023563003077_r8                         &
     & /)
      real(r8), dimension(nz), parameter :: s00 = (/                    &
     &                       34.32053218999008_r8, 34.31979560913958_r8,&
     & 34.31905970040195_r8, 34.31832490500693_r8, 34.31759165750987_r8,&
     & 34.31686038688352_r8, 34.31613151902180_r8, 34.31540547993764_r8,&
     & 34.31468269872024_r8, 34.31396360926132_r8, 34.31324864986790_r8,&
     & 34.31253826012878_r8, 34.31183287474894_r8, 34.31113291445512_r8,&
     & 34.31043877444975_r8, 34.30975081119740_r8, 34.30906932853105_r8,&
     & 34.30839456414287_r8, 34.30772667747723_r8, 34.30706573988631_r8,&
     & 34.30641172767044_r8, 34.30576451834392_r8, 34.30512389018083_r8,&
     & 34.30448952483868_r8, 34.30386101265997_r8, 34.30323786012635_r8,&
     & 34.30261949889504_r8, 34.30200529587287_r8, 34.30139456386712_r8,&
     & 34.30078657247023_r8, 34.30018055896608_r8, 34.29957573916372_r8,&
     & 34.29897131815440_r8, 34.29908340398649_r8, 34.29780700483986_r8,&
     & 34.29587053296296_r8, 34.29448572056151_r8, 34.29249925211686_r8,&
     & 34.29028483227551_r8, 34.28707559153986_r8, 34.28404022499274_r8,&
     & 34.28270408816849_r8, 34.27996176876592_r8, 34.27511746636803_r8,&
     & 34.27063171253224_r8, 34.26680645456581_r8, 34.26300621245798_r8,&
     & 34.25933140083203_r8, 34.25499705890255_r8, 34.25060388691493_r8,&
     & 34.24766946344764_r8, 34.24399585491793_r8, 34.23948233607586_r8,&
     & 34.23530698781490_r8, 34.23156411143006_r8, 34.22545972148692_r8,&
     & 34.21757627416750_r8, 34.21139708697801_r8, 34.20655072905140_r8,&
     & 34.20281103334646_r8, 34.19961432383859_r8, 34.19694726751929_r8,&
     & 34.19458436603107_r8, 34.19113244939301_r8, 34.18674368562292_r8,&
     & 34.18350089898457_r8, 34.18170381725988_r8, 34.17954991326607_r8,&
     & 34.17679317504626_r8, 34.17441928129068_r8, 34.17175159761446_r8,&
     & 34.16850072815421_r8, 34.16549258227431_r8, 34.16276178518000_r8,&
     & 34.16108790566787_r8, 34.15896108346822_r8, 34.15556117755377_r8,&
     & 34.15275759674463_r8, 34.15112842689765_r8, 34.14883305257348_r8,&
     & 34.14441134152400_r8, 34.13984025041919_r8, 34.13685980956569_r8,&
     & 34.13287654270917_r8, 34.12810102003674_r8, 34.12413504710429_r8,&
     & 34.12034135921687_r8, 34.11681189845538_r8, 34.11430023591898_r8,&
     & 34.11274324024097_r8, 34.10920315808274_r8, 34.10341290604733_r8,&
     & 34.09738482234934_r8, 34.09346192243312_r8, 34.09095033334418_r8,&
     & 34.08664429223676_r8, 34.08173746107117_r8, 34.07768479282883_r8,&
     & 34.07297087549580_r8, 34.06748694091047_r8, 34.06279977562380_r8,&
     & 34.05993352903011_r8, 34.05817507265353_r8, 34.05506517397429_r8,&
     & 34.04983534852896_r8, 34.04464694518404_r8, 34.04044675304212_r8,&
     & 34.03604594841608_r8, 34.03111865823607_r8, 34.02753849882920_r8,&
     & 34.02443682974060_r8, 34.02091633407314_r8, 34.01684637035055_r8,&
     & 34.01221896259720_r8, 34.00701473423683_r8, 34.00196837812303_r8,&
     & 33.99830871883788_r8, 33.99509878453556_r8, 33.99080913017610_r8,&
     & 33.98686344179986_r8, 33.98385008411221_r8, 33.98100993391342_r8,&
     & 33.97921546304665_r8, 33.97609821257332_r8, 33.97209820671667_r8,&
     & 33.97047640079053_r8, 33.96901113158071_r8, 33.96648186265556_r8,&
     & 33.96305419578507_r8, 33.95963173061041_r8, 33.95706736655633_r8,&
     & 33.95418220654804_r8, 33.95258923309250_r8, 33.95150595436092_r8,&
     & 33.94904928611645_r8, 33.94496756076339_r8, 33.93929221771292_r8,&
     & 33.93569999871179_r8, 33.93390612037291_r8, 33.93270228778647_r8,&
     & 33.93121712962308_r8, 33.92600429444194_r8, 33.91927147168485_r8,&
     & 33.91313480921453_r8, 33.90547133754014_r8, 33.89797410732507_r8,&
     & 33.89327254301486_r8, 33.88985479189758_r8, 33.88594415062291_r8,&
     & 33.88128968051764_r8, 33.87694656913428_r8, 33.87209538719432_r8,&
     & 33.86789593464735_r8, 33.86472297774648_r8, 33.86110686314152_r8,&
     & 33.85652760030964_r8, 33.85190567994568_r8, 33.84785008293155_r8,&
     & 33.84369428901386_r8, 33.83929947824437_r8, 33.83400069168908_r8,&
     & 33.82876780033961_r8, 33.82403221633415_r8, 33.81906104730019_r8,&
     & 33.81464676690227_r8, 33.81055339851724_r8, 33.80610164624302_r8,&
     & 33.80117598794142_r8, 33.79591479363723_r8, 33.79092534729394_r8,&
     & 33.78659830634746_r8, 33.78256430204619_r8, 33.77897292713196_r8,&
     & 33.77603331206125_r8, 33.77329732104204_r8, 33.77071718156501_r8,&
     & 33.76817393265197_r8, 33.76605669017022_r8, 33.76389144520931_r8,&
     & 33.76125150569632_r8, 33.75907646043808_r8, 33.75654504885748_r8,&
     & 33.75349883807979_r8, 33.75046272713320_r8, 33.74677571117897_r8,&
     & 33.74325110843751_r8, 33.74041806819646_r8, 33.73668782708716_r8,&
     & 33.73173794752182_r8, 33.72707612712205_r8, 33.72249163435852_r8,&
     & 33.71729227039708_r8, 33.71238140805713_r8, 33.70750690257336_r8,&
     & 33.70254942464051_r8, 33.69816143313306_r8, 33.69404576668439_r8,&
     & 33.68945861939766_r8, 33.68562505222850_r8, 33.68120970288323_r8,&
     & 33.67521193602263_r8, 33.67023066948197_r8, 33.66506224077340_r8,&
     & 33.65853435166721_r8, 33.65166831998298_r8, 33.64501396298798_r8,&
     & 33.63844173273068_r8, 33.63291762426644_r8, 33.62779216587619_r8,&
     & 33.62106692920159_r8, 33.61365143616490_r8, 33.60773460658668_r8,&
     & 33.60227780536623_r8, 33.59684568834867_r8, 33.59171436172327_r8,&
     & 33.58570080596812_r8, 33.57970684479484_r8, 33.57459813970359_r8,&
     & 33.57012558585157_r8, 33.56570201565369_r8, 33.56202954006253_r8,&
     & 33.55765752734525_r8, 33.55215565919930_r8, 33.54662092354890_r8,&
     & 33.54107128771702_r8, 33.53527252219143_r8, 33.52861076138673_r8,&
     & 33.52211840511210_r8, 33.51637236693654_r8, 33.51122936591487_r8,&
     & 33.50542267505440_r8, 33.49897618707415_r8, 33.49143782660065_r8,&
     & 33.48322929172641_r8, 33.47496989954409_r8, 33.46632080571946_r8,&
     & 33.45906397549156_r8, 33.45277725996535_r8, 33.44569582330547_r8,&
     & 33.43637395775173_r8, 33.42396422969429_r8, 33.40952981346598_r8,&
     & 33.39504862982345_r8, 33.38042840945201_r8, 33.36602451127439_r8,&
     & 33.35034029641025_r8, 33.33538337253414_r8, 33.32156889539605_r8,&
     & 33.30504897937515_r8, 33.28976480293855_r8, 33.27626336338767_r8,&
     & 33.26048782343232_r8, 33.24200465250144_r8, 33.22404584633712_r8,&
     & 33.20528501854590_r8, 33.18547888424752_r8, 33.16844141312591_r8,&
     & 33.15220210716587_r8, 33.13574717819091_r8, 33.11851817651042_r8,&
     & 33.09989531769952_r8, 33.08078382447843_r8, 33.06071608725830_r8,&
     & 33.04017369931156_r8, 33.01896272029588_r8, 32.99756231396039_r8,&
     & 32.97754144514316_r8, 32.95865600785406_r8, 32.93883457164660_r8,&
     & 32.91663524634790_r8, 32.89497367294688_r8, 32.87415334986560_r8,&
     & 32.85159027974754_r8, 32.82764474726155_r8, 32.80299648813235_r8,&
     & 32.77699932152125_r8, 32.74908249862513_r8, 32.72147989704070_r8,&
     & 32.69554685703868_r8, 32.67089892771837_r8, 32.64797968165751_r8,&
     & 32.62617138101963_r8, 32.60426780171172_r8, 32.58127681067731_r8,&
     & 32.55648287788803_r8, 32.52910023569094_r8, 32.49976986865245_r8,&
     & 32.46781549981651_r8, 32.43362127426444_r8, 32.39851441759481_r8,&
     & 32.35843486662795_r8, 32.30741453371972_r8, 32.24400619003654_r8,&
     & 32.16941836517641_r8, 32.08312169662790_r8, 31.97671103782582_r8,&
     & 31.82689798570168_r8, 31.67897563684032_r8, 31.54498314084126_r8,&
     & 31.41794687699110_r8, 31.31503135482658_r8                       &
     & /)

      integer :: i
      real(r8) :: wz
!
      IF (z .LE. z00(1)) THEN
        t = t00(1)
        s = s00(1)
      ELSEIF (z .GE. z00(nz)) THEN
        t = t00(nz)
        s = s00(nz)
      ELSE
        DO i = 2, nz
          IF (z .LE. z00(i)) THEN
            wz = (z-z00(i-1))/(z00(i)-z00(i-1))
            t = (1-wz)*t00(i-1)+wz*t00(i)
            s = (1-wz)*s00(i-1)+wz*s00(i)
            EXIT
          ENDIF
        ENDDO
      ENDIF
      RETURN
      END SUBROUTINE LININTP
